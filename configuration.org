#+TITLE: Emacs configuration

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC


* Custom splitting functions
#+BEGIN_SRC emacs-lisp
  (defun vsplit-last-buffer ()
    (interactive)
    (split-window-vertically)
    (other-window 1 nil)
    (switch-to-next-buffer)
    )
  (defun hsplit-last-buffer ()
    (interactive)
    (split-window-horizontally)
    (other-window 1 nil)
    (switch-to-next-buffer)
    )
 
  (global-set-key (kbd "C-x 2") 'vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'hsplit-last-buffer)
#+END_SRC 
* org mode
** Quickly insert a block of elisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** https://github.com/koddo/org-clock-statusbar-app
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-clock-in-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" (concat "tell application \"org-clock-statusbar\" to clock in \"" (replace-regexp-in-string "\"" "\\\\\"" org-clock-current-task) "\""))))
  (add-hook 'org-clock-out-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
  (add-hook 'org-clock-cancel-hook (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e" "tell application \"org-clock-statusbar\" to clock out")))
#+END_SRC
** org clock report format
#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
#+END_SRC
** org use LOGBOOK
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC
** org-capture
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org-mode")
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-inbox-file "~/Dropbox/inbox.org")
  (setq org-index-file (org-file-path "index.org"))
  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))

  (setq org-agenda-files (list org-index-file))

  (setq org-capture-templates
        '(("t" "Todo"
           entry
           (file+headline org-index-file "Inbox")
           "* TODO %?\n")))
#+END_SRC
** key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-c C-j") 'org-clock-goto)
  (global-set-key (kbd "C-c C-c C-r") 'org-clock-in-last)
  (global-set-key (kbd "C-c C-c C-o") 'org-clock-out)
  (global-set-key (kbd "C-c m") 'org-capture)
#+END_SRC

* JSON export
#+BEGIN_SRC emacs-lisp
  ;; Provides function to export current org buffer as JSON structure
  ;; to $file.org.json. Adapted from an org-mode mailing post by
  ;; Brett Viren: https://lists.gnu.org/archive/html/emacs-orgmode/2014-01/msg00338.html
  (require 'json)
  (defun org-export-json ()
    (interactive)
    (let* ((tree (org-element-parse-buffer 'object nil)))
      (org-element-map tree (append org-element-all-elements
                                    org-element-all-objects '(plain-text))
        (lambda (x)
          (if (org-element-property :parent x)
              (org-element-put-property x :parent "none"))
          (if (org-element-property :structure x)
              (org-element-put-property x :structure "none"))
          ))
      (write-region
       (json-encode tree)
       nil (concat (buffer-file-name) ".json"))))
#+END_SRC  
